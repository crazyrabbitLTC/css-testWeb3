/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VaultInterface extends ethers.utils.Interface {
  functions: {
    "close(address)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "governorAlpha()": FunctionFragment;
    "nft()": FunctionFragment;
    "owner()": FunctionFragment;
    "sourceToken()": FunctionFragment;
    "vaultId()": FunctionFragment;
    "vote(uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "close", values: [string]): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "governorAlpha",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sourceToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vaultId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governorAlpha",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sourceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "Delegation(address,address)": EventFragment;
    "Voted(address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Delegation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export class Vault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VaultInterface;

  functions: {
    close(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "close(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    governorAlpha(overrides?: CallOverrides): Promise<[string]>;

    "governorAlpha()"(overrides?: CallOverrides): Promise<[string]>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    "nft()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    sourceToken(overrides?: CallOverrides): Promise<[string]>;

    "sourceToken()"(overrides?: CallOverrides): Promise<[string]>;

    vaultId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "vaultId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  close(recipient: string, overrides?: Overrides): Promise<ContractTransaction>;

  "close(address)"(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegate(
    delegatee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegate(address)"(
    delegatee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  governorAlpha(overrides?: CallOverrides): Promise<string>;

  "governorAlpha()"(overrides?: CallOverrides): Promise<string>;

  nft(overrides?: CallOverrides): Promise<string>;

  "nft()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  sourceToken(overrides?: CallOverrides): Promise<string>;

  "sourceToken()"(overrides?: CallOverrides): Promise<string>;

  vaultId(overrides?: CallOverrides): Promise<BigNumber>;

  "vaultId()"(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vote(uint256,bool)"(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    close(recipient: string, overrides?: CallOverrides): Promise<void>;

    "close(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    "delegate(address)"(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    governorAlpha(overrides?: CallOverrides): Promise<string>;

    "governorAlpha()"(overrides?: CallOverrides): Promise<string>;

    nft(overrides?: CallOverrides): Promise<string>;

    "nft()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    sourceToken(overrides?: CallOverrides): Promise<string>;

    "sourceToken()"(overrides?: CallOverrides): Promise<string>;

    vaultId(overrides?: CallOverrides): Promise<BigNumber>;

    "vaultId()"(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "vote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Delegation(delegator: null, delegatee: null): EventFilter;

    Voted(voter: null, proposalId: null, support: null): EventFilter;
  };

  estimateGas: {
    close(recipient: string, overrides?: Overrides): Promise<BigNumber>;

    "close(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegate(delegatee: string, overrides?: Overrides): Promise<BigNumber>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    governorAlpha(overrides?: CallOverrides): Promise<BigNumber>;

    "governorAlpha()"(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    "nft()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    sourceToken(overrides?: CallOverrides): Promise<BigNumber>;

    "sourceToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    vaultId(overrides?: CallOverrides): Promise<BigNumber>;

    "vaultId()"(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "vote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    close(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "close(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    governorAlpha(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governorAlpha()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nft()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sourceToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sourceToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vaultId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
